// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2020 17:39:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    maquinaestado
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module maquinaestado_vlg_sample_tst(
	clk,
	level,
	reset,
	sampler_tx
);
input  clk;
input  level;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or level or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module maquinaestado_vlg_check_tst (
	Mealy_tick,
	Moore_tick,
	sampler_rx
);
input  Mealy_tick;
input  Moore_tick;
input sampler_rx;

reg  Mealy_tick_expected;
reg  Moore_tick_expected;

reg  Mealy_tick_prev;
reg  Moore_tick_prev;

reg  Mealy_tick_expected_prev;
reg  Moore_tick_expected_prev;

reg  last_Mealy_tick_exp;
reg  last_Moore_tick_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Mealy_tick_prev = Mealy_tick;
	Moore_tick_prev = Moore_tick;
end

// update expected /o prevs

always @(trigger)
begin
	Mealy_tick_expected_prev = Mealy_tick_expected;
	Moore_tick_expected_prev = Moore_tick_expected;
end



// expected Mealy_tick
initial
begin
	Mealy_tick_expected = 1'bX;
end 

// expected Moore_tick
initial
begin
	Moore_tick_expected = 1'bX;
end 
// generate trigger
always @(Mealy_tick_expected or Mealy_tick or Moore_tick_expected or Moore_tick)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Mealy_tick = %b | expected Moore_tick = %b | ",Mealy_tick_expected_prev,Moore_tick_expected_prev);
	$display("| real Mealy_tick = %b | real Moore_tick = %b | ",Mealy_tick_prev,Moore_tick_prev);
`endif
	if (
		( Mealy_tick_expected_prev !== 1'bx ) && ( Mealy_tick_prev !== Mealy_tick_expected_prev )
		&& ((Mealy_tick_expected_prev !== last_Mealy_tick_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Mealy_tick :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Mealy_tick_expected_prev);
		$display ("     Real value = %b", Mealy_tick_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Mealy_tick_exp = Mealy_tick_expected_prev;
	end
	if (
		( Moore_tick_expected_prev !== 1'bx ) && ( Moore_tick_prev !== Moore_tick_expected_prev )
		&& ((Moore_tick_expected_prev !== last_Moore_tick_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Moore_tick :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Moore_tick_expected_prev);
		$display ("     Real value = %b", Moore_tick_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Moore_tick_exp = Moore_tick_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module maquinaestado_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg level;
reg reset;
// wires                                               
wire Mealy_tick;
wire Moore_tick;

wire sampler;                             

// assign statements (if any)                          
maquinaestado i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.level(level),
	.Mealy_tick(Mealy_tick),
	.Moore_tick(Moore_tick),
	.reset(reset)
);

// clk
initial
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #15000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #15000 1'b1;
	clk = #25000 1'b0;
	clk = #35000 1'b1;
	clk = #15000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #15000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #20000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #20000 1'b1;
	clk = #20000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #15000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #15000 1'b1;
	clk = #5000 1'b0;
	clk = #15000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #20000 1'b1;
	clk = #5000 1'b0;
	clk = #15000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #20000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #25000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #15000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #25000 1'b0;
	clk = #20000 1'b1;
	clk = #35000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #40000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #15000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #15000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #20000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
end 

// level
initial
begin
	level = 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
end 

maquinaestado_vlg_sample_tst tb_sample (
	.clk(clk),
	.level(level),
	.reset(reset),
	.sampler_tx(sampler)
);

maquinaestado_vlg_check_tst tb_out(
	.Mealy_tick(Mealy_tick),
	.Moore_tick(Moore_tick),
	.sampler_rx(sampler)
);
endmodule

