// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 15.0.0 Build 145 04/22/2015 Patches 0.01we SJ Web Edition"

// DATE "06/10/2020 20:27:12"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module moore_perp (
	clk,
	rst,
	s0,
	s1,
	s2);
input 	clk;
input 	rst;
output 	s0;
output 	s1;
output 	s2;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \s0~output_o ;
wire \s1~output_o ;
wire \s2~output_o ;
wire \clk~input_o ;
wire \stateMoore_reg.one~0_combout ;
wire \rst~input_o ;
wire \stateMoore_reg.one~q ;
wire \stateMoore_reg.two~q ;
wire \stateMoore_reg.zero~0_combout ;
wire \stateMoore_reg.zero~q ;


cyclonev_io_obuf \s0~output (
	.i(!\stateMoore_reg.zero~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s0~output_o ),
	.obar());
// synopsys translate_off
defparam \s0~output .bus_hold = "false";
defparam \s0~output .open_drain_output = "false";
defparam \s0~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \s1~output (
	.i(\stateMoore_reg.one~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s1~output_o ),
	.obar());
// synopsys translate_off
defparam \s1~output .bus_hold = "false";
defparam \s1~output .open_drain_output = "false";
defparam \s1~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \s2~output (
	.i(\stateMoore_reg.two~q ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\s2~output_o ),
	.obar());
// synopsys translate_off
defparam \s2~output .bus_hold = "false";
defparam \s2~output .open_drain_output = "false";
defparam \s2~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \stateMoore_reg.one~0 (
// Equation(s):
// \stateMoore_reg.one~0_combout  = !\stateMoore_reg.zero~q 

	.dataa(!\stateMoore_reg.zero~q ),
	.datab(gnd),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\stateMoore_reg.one~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \stateMoore_reg.one~0 .extended_lut = "off";
defparam \stateMoore_reg.one~0 .lut_mask = 64'hAAAAAAAAAAAAAAAA;
defparam \stateMoore_reg.one~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \rst~input (
	.i(rst),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\rst~input_o ));
// synopsys translate_off
defparam \rst~input .bus_hold = "false";
defparam \rst~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \stateMoore_reg.one (
	.clk(\clk~input_o ),
	.d(\stateMoore_reg.one~0_combout ),
	.asdata(vcc),
	.clrn(!\rst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\stateMoore_reg.one~q ),
	.prn(vcc));
// synopsys translate_off
defparam \stateMoore_reg.one .is_wysiwyg = "true";
defparam \stateMoore_reg.one .power_up = "low";
// synopsys translate_on

dffeas \stateMoore_reg.two (
	.clk(\clk~input_o ),
	.d(\stateMoore_reg.one~q ),
	.asdata(vcc),
	.clrn(!\rst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\stateMoore_reg.two~q ),
	.prn(vcc));
// synopsys translate_off
defparam \stateMoore_reg.two .is_wysiwyg = "true";
defparam \stateMoore_reg.two .power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb \stateMoore_reg.zero~0 (
// Equation(s):
// \stateMoore_reg.zero~0_combout  = !\stateMoore_reg.two~q 

	.dataa(!\stateMoore_reg.two~q ),
	.datab(gnd),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\stateMoore_reg.zero~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \stateMoore_reg.zero~0 .extended_lut = "off";
defparam \stateMoore_reg.zero~0 .lut_mask = 64'hAAAAAAAAAAAAAAAA;
defparam \stateMoore_reg.zero~0 .shared_arith = "off";
// synopsys translate_on

dffeas \stateMoore_reg.zero (
	.clk(\clk~input_o ),
	.d(\stateMoore_reg.zero~0_combout ),
	.asdata(vcc),
	.clrn(!\rst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\stateMoore_reg.zero~q ),
	.prn(vcc));
// synopsys translate_off
defparam \stateMoore_reg.zero .is_wysiwyg = "true";
defparam \stateMoore_reg.zero .power_up = "low";
// synopsys translate_on

assign s0 = \s0~output_o ;

assign s1 = \s1~output_o ;

assign s2 = \s2~output_o ;

endmodule
