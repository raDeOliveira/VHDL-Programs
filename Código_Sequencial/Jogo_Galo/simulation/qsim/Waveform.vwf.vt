// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/06/2020 18:04:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    jogo_galo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module jogo_galo_vlg_sample_tst(
	v,
	sampler_tx
);
input [9:0] v;
output sampler_tx;

reg sample;
time current_time;
always @(v)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module jogo_galo_vlg_check_tst (
	v2,
	sampler_rx
);
input [9:0] v2;
input sampler_rx;

reg [9:0] v2_expected;

reg [9:0] v2_prev;

reg [9:0] v2_expected_prev;

reg [9:0] last_v2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	v2_prev = v2;
end

// update expected /o prevs

always @(trigger)
begin
	v2_expected_prev = v2_expected;
end


// expected v2[ 9 ]
initial
begin
	v2_expected[9] = 1'bX;
end 
// expected v2[ 8 ]
initial
begin
	v2_expected[8] = 1'bX;
end 
// expected v2[ 7 ]
initial
begin
	v2_expected[7] = 1'bX;
end 
// expected v2[ 6 ]
initial
begin
	v2_expected[6] = 1'bX;
end 
// expected v2[ 5 ]
initial
begin
	v2_expected[5] = 1'bX;
end 
// expected v2[ 4 ]
initial
begin
	v2_expected[4] = 1'bX;
end 
// expected v2[ 3 ]
initial
begin
	v2_expected[3] = 1'bX;
end 
// expected v2[ 2 ]
initial
begin
	v2_expected[2] = 1'bX;
end 
// expected v2[ 1 ]
initial
begin
	v2_expected[1] = 1'bX;
end 
// expected v2[ 0 ]
initial
begin
	v2_expected[0] = 1'bX;
end 
// generate trigger
always @(v2_expected or v2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected v2 = %b | ",v2_expected_prev);
	$display("| real v2 = %b | ",v2_prev);
`endif
	if (
		( v2_expected_prev[0] !== 1'bx ) && ( v2_prev[0] !== v2_expected_prev[0] )
		&& ((v2_expected_prev[0] !== last_v2_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[0] = v2_expected_prev[0];
	end
	if (
		( v2_expected_prev[1] !== 1'bx ) && ( v2_prev[1] !== v2_expected_prev[1] )
		&& ((v2_expected_prev[1] !== last_v2_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[1] = v2_expected_prev[1];
	end
	if (
		( v2_expected_prev[2] !== 1'bx ) && ( v2_prev[2] !== v2_expected_prev[2] )
		&& ((v2_expected_prev[2] !== last_v2_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[2] = v2_expected_prev[2];
	end
	if (
		( v2_expected_prev[3] !== 1'bx ) && ( v2_prev[3] !== v2_expected_prev[3] )
		&& ((v2_expected_prev[3] !== last_v2_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[3] = v2_expected_prev[3];
	end
	if (
		( v2_expected_prev[4] !== 1'bx ) && ( v2_prev[4] !== v2_expected_prev[4] )
		&& ((v2_expected_prev[4] !== last_v2_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[4] = v2_expected_prev[4];
	end
	if (
		( v2_expected_prev[5] !== 1'bx ) && ( v2_prev[5] !== v2_expected_prev[5] )
		&& ((v2_expected_prev[5] !== last_v2_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[5] = v2_expected_prev[5];
	end
	if (
		( v2_expected_prev[6] !== 1'bx ) && ( v2_prev[6] !== v2_expected_prev[6] )
		&& ((v2_expected_prev[6] !== last_v2_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[6] = v2_expected_prev[6];
	end
	if (
		( v2_expected_prev[7] !== 1'bx ) && ( v2_prev[7] !== v2_expected_prev[7] )
		&& ((v2_expected_prev[7] !== last_v2_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[7] = v2_expected_prev[7];
	end
	if (
		( v2_expected_prev[8] !== 1'bx ) && ( v2_prev[8] !== v2_expected_prev[8] )
		&& ((v2_expected_prev[8] !== last_v2_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[8] = v2_expected_prev[8];
	end
	if (
		( v2_expected_prev[9] !== 1'bx ) && ( v2_prev[9] !== v2_expected_prev[9] )
		&& ((v2_expected_prev[9] !== last_v2_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v2_expected_prev);
		$display ("     Real value = %b", v2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_v2_exp[9] = v2_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module jogo_galo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] v;
// wires                                               
wire [9:0] v2;

wire sampler;                             

// assign statements (if any)                          
jogo_galo i1 (
// port map - connection between master ports and signals/registers   
	.v(v),
	.v2(v2)
);
// v[ 9 ]
initial
begin
	v[9] = 1'b1;
end 
// v[ 8 ]
initial
begin
	v[8] = 1'b0;
end 
// v[ 7 ]
initial
begin
	v[7] = 1'b0;
end 
// v[ 6 ]
initial
begin
	v[6] = 1'b0;
end 
// v[ 5 ]
initial
begin
	v[5] = 1'b1;
end 
// v[ 4 ]
initial
begin
	v[4] = 1'b0;
end 
// v[ 3 ]
initial
begin
	v[3] = 1'b0;
end 
// v[ 2 ]
initial
begin
	v[2] = 1'b1;
end 
// v[ 1 ]
initial
begin
	v[1] = 1'b0;
end 
// v[ 0 ]
initial
begin
	v[0] = 1'b0;
end 

jogo_galo_vlg_sample_tst tb_sample (
	.v(v),
	.sampler_tx(sampler)
);

jogo_galo_vlg_check_tst tb_out(
	.v2(v2),
	.sampler_rx(sampler)
);
endmodule

