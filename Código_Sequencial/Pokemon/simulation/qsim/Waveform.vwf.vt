// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2020 23:37:38"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Pokemon
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Pokemon_vlg_sample_tst(
	jogador1,
	jogador2,
	sampler_tx
);
input  jogador1;
input  jogador2;
output sampler_tx;

reg sample;
time current_time;
always @(jogador1 or jogador2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Pokemon_vlg_check_tst (
	pk_Tie,
	pk_Win,
	sampler_rx
);
input  pk_Tie;
input  pk_Win;
input sampler_rx;

reg  pk_Tie_expected;
reg  pk_Win_expected;

reg  pk_Tie_prev;
reg  pk_Win_prev;

reg  pk_Tie_expected_prev;
reg  pk_Win_expected_prev;

reg  last_pk_Tie_exp;
reg  last_pk_Win_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	pk_Tie_prev = pk_Tie;
	pk_Win_prev = pk_Win;
end

// update expected /o prevs

always @(trigger)
begin
	pk_Tie_expected_prev = pk_Tie_expected;
	pk_Win_expected_prev = pk_Win_expected;
end



// expected pk_Tie
initial
begin
	pk_Tie_expected = 1'bX;
end 

// expected pk_Win
initial
begin
	pk_Win_expected = 1'bX;
end 
// generate trigger
always @(pk_Tie_expected or pk_Tie or pk_Win_expected or pk_Win)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pk_Tie = %b | expected pk_Win = %b | ",pk_Tie_expected_prev,pk_Win_expected_prev);
	$display("| real pk_Tie = %b | real pk_Win = %b | ",pk_Tie_prev,pk_Win_prev);
`endif
	if (
		( pk_Tie_expected_prev !== 1'bx ) && ( pk_Tie_prev !== pk_Tie_expected_prev )
		&& ((pk_Tie_expected_prev !== last_pk_Tie_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pk_Tie :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pk_Tie_expected_prev);
		$display ("     Real value = %b", pk_Tie_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pk_Tie_exp = pk_Tie_expected_prev;
	end
	if (
		( pk_Win_expected_prev !== 1'bx ) && ( pk_Win_prev !== pk_Win_expected_prev )
		&& ((pk_Win_expected_prev !== last_pk_Win_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pk_Win :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pk_Win_expected_prev);
		$display ("     Real value = %b", pk_Win_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pk_Win_exp = pk_Win_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Pokemon_vlg_vec_tst();
// constants                                           
// general purpose registers
reg jogador1;
reg jogador2;
// wires                                               
wire pk_Tie;
wire pk_Win;

wire sampler;                             

// assign statements (if any)                          
Pokemon i1 (
// port map - connection between master ports and signals/registers   
	.jogador1(jogador1),
	.jogador2(jogador2),
	.pk_Tie(pk_Tie),
	.pk_Win(pk_Win)
);

// jogador1
initial
begin
	jogador1 = 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #20000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #20000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #25000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #20000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #20000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #30000 1'b1;
	jogador1 = #75000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #20000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #15000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #10000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #20000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #20000 1'b0;
	jogador1 = #15000 1'b1;
	jogador1 = #10000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
	jogador1 = #5000 1'b1;
	jogador1 = #5000 1'b0;
end 

// jogador2
initial
begin
	jogador2 = 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #25000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #20000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #20000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #25000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #20000 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #15000 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #25000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #25000 1'b0;
	jogador2 = #10000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #20000 1'b0;
	jogador2 = #20000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #25000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #10000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #10000 1'b1;
	jogador2 = #45000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #20000 1'b1;
	jogador2 = #25000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #10000 1'b1;
	jogador2 = #20000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #15000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #20000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #15000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #10000 1'b1;
	jogador2 = #15000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #5000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #10000 1'b0;
	jogador2 = #5000 1'b1;
	jogador2 = #15000 1'b0;
	jogador2 = #5000 1'b1;
end 

Pokemon_vlg_sample_tst tb_sample (
	.jogador1(jogador1),
	.jogador2(jogador2),
	.sampler_tx(sampler)
);

Pokemon_vlg_check_tst tb_out(
	.pk_Tie(pk_Tie),
	.pk_Win(pk_Win),
	.sampler_rx(sampler)
);
endmodule

