// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 15.0.0 Build 145 04/22/2015 Patches 0.01we SJ Web Edition"

// DATE "06/05/2020 08:24:58"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module adn (
	a,
	a2,
	b_out);
input 	[4:0] a;
input 	[4:0] a2;
output 	b_out;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \a[0]~input_o ;
wire \a[1]~input_o ;
wire \a2[0]~input_o ;
wire \a2[4]~input_o ;
wire \b_out~output_o ;
wire \a[4]~input_o ;
wire \a2[1]~input_o ;
wire \a[3]~input_o ;
wire \a2[2]~input_o ;
wire \a[2]~input_o ;
wire \a2[3]~input_o ;
wire \b_out~0_combout ;


cyclonev_io_obuf \b_out~output (
	.i(\b_out~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\b_out~output_o ),
	.obar());
// synopsys translate_off
defparam \b_out~output .bus_hold = "false";
defparam \b_out~output .open_drain_output = "false";
defparam \b_out~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \a[4]~input (
	.i(a[4]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[4]~input_o ));
// synopsys translate_off
defparam \a[4]~input .bus_hold = "false";
defparam \a[4]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a2[1]~input (
	.i(a2[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a2[1]~input_o ));
// synopsys translate_off
defparam \a2[1]~input .bus_hold = "false";
defparam \a2[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a[3]~input (
	.i(a[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[3]~input_o ));
// synopsys translate_off
defparam \a[3]~input .bus_hold = "false";
defparam \a[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a2[2]~input (
	.i(a2[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a2[2]~input_o ));
// synopsys translate_off
defparam \a2[2]~input .bus_hold = "false";
defparam \a2[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a[2]~input (
	.i(a[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[2]~input_o ));
// synopsys translate_off
defparam \a[2]~input .bus_hold = "false";
defparam \a[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a2[3]~input (
	.i(a2[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a2[3]~input_o ));
// synopsys translate_off
defparam \a2[3]~input .bus_hold = "false";
defparam \a2[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \b_out~0 (
// Equation(s):
// \b_out~0_combout  = ( \a[2]~input_o  & ( \a2[3]~input_o  ) ) # ( !\a[2]~input_o  & ( \a2[3]~input_o  & ( (!\a[4]~input_o  & (((\a[3]~input_o  & \a2[2]~input_o )))) # (\a[4]~input_o  & (((\a[3]~input_o  & \a2[2]~input_o )) # (\a2[1]~input_o ))) ) ) ) # ( 
// \a[2]~input_o  & ( !\a2[3]~input_o  & ( (!\a[4]~input_o  & (((\a[3]~input_o  & \a2[2]~input_o )))) # (\a[4]~input_o  & (((\a[3]~input_o  & \a2[2]~input_o )) # (\a2[1]~input_o ))) ) ) ) # ( !\a[2]~input_o  & ( !\a2[3]~input_o  & ( (!\a[4]~input_o  & 
// (((\a[3]~input_o  & \a2[2]~input_o )))) # (\a[4]~input_o  & (((\a[3]~input_o  & \a2[2]~input_o )) # (\a2[1]~input_o ))) ) ) )

	.dataa(!\a[4]~input_o ),
	.datab(!\a2[1]~input_o ),
	.datac(!\a[3]~input_o ),
	.datad(!\a2[2]~input_o ),
	.datae(!\a[2]~input_o ),
	.dataf(!\a2[3]~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\b_out~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \b_out~0 .extended_lut = "off";
defparam \b_out~0 .lut_mask = 64'h111F111F111FFFFF;
defparam \b_out~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \a[0]~input (
	.i(a[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[0]~input_o ));
// synopsys translate_off
defparam \a[0]~input .bus_hold = "false";
defparam \a[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a[1]~input (
	.i(a[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a[1]~input_o ));
// synopsys translate_off
defparam \a[1]~input .bus_hold = "false";
defparam \a[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a2[0]~input (
	.i(a2[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a2[0]~input_o ));
// synopsys translate_off
defparam \a2[0]~input .bus_hold = "false";
defparam \a2[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a2[4]~input (
	.i(a2[4]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a2[4]~input_o ));
// synopsys translate_off
defparam \a2[4]~input .bus_hold = "false";
defparam \a2[4]~input .simulate_z_as = "z";
// synopsys translate_on

assign b_out = \b_out~output_o ;

endmodule
