// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 15.0.0 Build 145 04/22/2015 Patches 0.01we SJ Web Edition"

// DATE "06/05/2020 08:03:48"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module trama (
	trama,
	saida);
input 	[2:0] trama;
output 	[6:0] saida;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \saida[0]~output_o ;
wire \saida[1]~output_o ;
wire \saida[2]~output_o ;
wire \saida[3]~output_o ;
wire \saida[4]~output_o ;
wire \saida[5]~output_o ;
wire \saida[6]~output_o ;
wire \trama[1]~input_o ;
wire \trama[0]~input_o ;
wire \trama[2]~input_o ;
wire \saida~0_combout ;
wire \saida~1_combout ;
wire \saida~2_combout ;
wire \saida~3_combout ;
wire \saida~4_combout ;
wire \saida~5_combout ;


cyclonev_io_obuf \saida[0]~output (
	.i(!\saida~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \saida[0]~output .bus_hold = "false";
defparam \saida[0]~output .open_drain_output = "false";
defparam \saida[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \saida[1]~output (
	.i(\saida~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \saida[1]~output .bus_hold = "false";
defparam \saida[1]~output .open_drain_output = "false";
defparam \saida[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \saida[2]~output (
	.i(\saida~2_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \saida[2]~output .bus_hold = "false";
defparam \saida[2]~output .open_drain_output = "false";
defparam \saida[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \saida[3]~output (
	.i(\saida~3_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \saida[3]~output .bus_hold = "false";
defparam \saida[3]~output .open_drain_output = "false";
defparam \saida[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \saida[4]~output (
	.i(\saida~2_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \saida[4]~output .bus_hold = "false";
defparam \saida[4]~output .open_drain_output = "false";
defparam \saida[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \saida[5]~output (
	.i(\saida~4_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \saida[5]~output .bus_hold = "false";
defparam \saida[5]~output .open_drain_output = "false";
defparam \saida[5]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \saida[6]~output (
	.i(\saida~5_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \saida[6]~output .bus_hold = "false";
defparam \saida[6]~output .open_drain_output = "false";
defparam \saida[6]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \trama[1]~input (
	.i(trama[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\trama[1]~input_o ));
// synopsys translate_off
defparam \trama[1]~input .bus_hold = "false";
defparam \trama[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \trama[0]~input (
	.i(trama[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\trama[0]~input_o ));
// synopsys translate_off
defparam \trama[0]~input .bus_hold = "false";
defparam \trama[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \trama[2]~input (
	.i(trama[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\trama[2]~input_o ));
// synopsys translate_off
defparam \trama[2]~input .bus_hold = "false";
defparam \trama[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \saida~0 (
// Equation(s):
// \saida~0_combout  = ((\trama[2]~input_o ) # (\trama[0]~input_o )) # (\trama[1]~input_o )

	.dataa(!\trama[1]~input_o ),
	.datab(!\trama[0]~input_o ),
	.datac(!\trama[2]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\saida~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \saida~0 .extended_lut = "off";
defparam \saida~0 .lut_mask = 64'h7F7F7F7F7F7F7F7F;
defparam \saida~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \saida~1 (
// Equation(s):
// \saida~1_combout  = (\trama[1]~input_o  & (!\trama[0]~input_o  & !\trama[2]~input_o ))

	.dataa(!\trama[1]~input_o ),
	.datab(!\trama[0]~input_o ),
	.datac(!\trama[2]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\saida~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \saida~1 .extended_lut = "off";
defparam \saida~1 .lut_mask = 64'h4040404040404040;
defparam \saida~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \saida~2 (
// Equation(s):
// \saida~2_combout  = (!\trama[1]~input_o  & (!\trama[0]~input_o  & \trama[2]~input_o ))

	.dataa(!\trama[1]~input_o ),
	.datab(!\trama[0]~input_o ),
	.datac(!\trama[2]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\saida~2_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \saida~2 .extended_lut = "off";
defparam \saida~2 .lut_mask = 64'h0808080808080808;
defparam \saida~2 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \saida~3 (
// Equation(s):
// \saida~3_combout  = (\trama[1]~input_o  & (\trama[0]~input_o  & !\trama[2]~input_o ))

	.dataa(!\trama[1]~input_o ),
	.datab(!\trama[0]~input_o ),
	.datac(!\trama[2]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\saida~3_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \saida~3 .extended_lut = "off";
defparam \saida~3 .lut_mask = 64'h1010101010101010;
defparam \saida~3 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \saida~4 (
// Equation(s):
// \saida~4_combout  = (!\trama[1]~input_o  & (\trama[0]~input_o  & \trama[2]~input_o ))

	.dataa(!\trama[1]~input_o ),
	.datab(!\trama[0]~input_o ),
	.datac(!\trama[2]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\saida~4_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \saida~4 .extended_lut = "off";
defparam \saida~4 .lut_mask = 64'h0202020202020202;
defparam \saida~4 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \saida~5 (
// Equation(s):
// \saida~5_combout  = (\trama[1]~input_o  & (\trama[0]~input_o  & \trama[2]~input_o ))

	.dataa(!\trama[1]~input_o ),
	.datab(!\trama[0]~input_o ),
	.datac(!\trama[2]~input_o ),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\saida~5_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \saida~5 .extended_lut = "off";
defparam \saida~5 .lut_mask = 64'h0101010101010101;
defparam \saida~5 .shared_arith = "off";
// synopsys translate_on

assign saida[0] = \saida[0]~output_o ;

assign saida[1] = \saida[1]~output_o ;

assign saida[2] = \saida[2]~output_o ;

assign saida[3] = \saida[3]~output_o ;

assign saida[4] = \saida[4]~output_o ;

assign saida[5] = \saida[5]~output_o ;

assign saida[6] = \saida[6]~output_o ;

endmodule
