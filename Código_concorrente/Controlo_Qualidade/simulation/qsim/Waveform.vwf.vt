// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/30/2020 19:03:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controloqualidade
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controloqualidade_vlg_sample_tst(
	bits_entrada,
	bits_entrada2,
	sampler_tx
);
input [7:0] bits_entrada;
input [7:0] bits_entrada2;
output sampler_tx;

reg sample;
time current_time;
always @(bits_entrada or bits_entrada2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controloqualidade_vlg_check_tst (
	led_verde,
	led_vermelho,
	sampler_rx
);
input  led_verde;
input  led_vermelho;
input sampler_rx;

reg  led_verde_expected;
reg  led_vermelho_expected;

reg  led_verde_prev;
reg  led_vermelho_prev;

reg  led_verde_expected_prev;
reg  led_vermelho_expected_prev;

reg  last_led_verde_exp;
reg  last_led_vermelho_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	led_verde_prev = led_verde;
	led_vermelho_prev = led_vermelho;
end

// update expected /o prevs

always @(trigger)
begin
	led_verde_expected_prev = led_verde_expected;
	led_vermelho_expected_prev = led_vermelho_expected;
end



// expected led_verde
initial
begin
	led_verde_expected = 1'bX;
end 

// expected led_vermelho
initial
begin
	led_vermelho_expected = 1'bX;
end 
// generate trigger
always @(led_verde_expected or led_verde or led_vermelho_expected or led_vermelho)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected led_verde = %b | expected led_vermelho = %b | ",led_verde_expected_prev,led_vermelho_expected_prev);
	$display("| real led_verde = %b | real led_vermelho = %b | ",led_verde_prev,led_vermelho_prev);
`endif
	if (
		( led_verde_expected_prev !== 1'bx ) && ( led_verde_prev !== led_verde_expected_prev )
		&& ((led_verde_expected_prev !== last_led_verde_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_verde :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_verde_expected_prev);
		$display ("     Real value = %b", led_verde_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_led_verde_exp = led_verde_expected_prev;
	end
	if (
		( led_vermelho_expected_prev !== 1'bx ) && ( led_vermelho_prev !== led_vermelho_expected_prev )
		&& ((led_vermelho_expected_prev !== last_led_vermelho_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led_vermelho :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_vermelho_expected_prev);
		$display ("     Real value = %b", led_vermelho_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_led_vermelho_exp = led_vermelho_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controloqualidade_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] bits_entrada;
reg [7:0] bits_entrada2;
// wires                                               
wire led_verde;
wire led_vermelho;

wire sampler;                             

// assign statements (if any)                          
controloqualidade i1 (
// port map - connection between master ports and signals/registers   
	.bits_entrada(bits_entrada),
	.bits_entrada2(bits_entrada2),
	.led_verde(led_verde),
	.led_vermelho(led_vermelho)
);
// bits_entrada[ 7 ]
initial
begin
	bits_entrada[7] = 1'b1;
end 
// bits_entrada[ 6 ]
initial
begin
	bits_entrada[6] = 1'b1;
end 
// bits_entrada[ 5 ]
initial
begin
	bits_entrada[5] = 1'b1;
end 
// bits_entrada[ 4 ]
initial
begin
	bits_entrada[4] = 1'b1;
end 
// bits_entrada[ 3 ]
initial
begin
	bits_entrada[3] = 1'b1;
end 
// bits_entrada[ 2 ]
initial
begin
	bits_entrada[2] = 1'b1;
end 
// bits_entrada[ 1 ]
initial
begin
	bits_entrada[1] = 1'b1;
end 
// bits_entrada[ 0 ]
initial
begin
	bits_entrada[0] = 1'b1;
end 
// bits_entrada2[ 7 ]
initial
begin
	bits_entrada2[7] = 1'b1;
end 
// bits_entrada2[ 6 ]
initial
begin
	bits_entrada2[6] = 1'b1;
end 
// bits_entrada2[ 5 ]
initial
begin
	bits_entrada2[5] = 1'b1;
end 
// bits_entrada2[ 4 ]
initial
begin
	bits_entrada2[4] = 1'b1;
end 
// bits_entrada2[ 3 ]
initial
begin
	bits_entrada2[3] = 1'b1;
end 
// bits_entrada2[ 2 ]
initial
begin
	bits_entrada2[2] = 1'b1;
end 
// bits_entrada2[ 1 ]
initial
begin
	bits_entrada2[1] = 1'b1;
end 
// bits_entrada2[ 0 ]
initial
begin
	bits_entrada2[0] = 1'b1;
end 

controloqualidade_vlg_sample_tst tb_sample (
	.bits_entrada(bits_entrada),
	.bits_entrada2(bits_entrada2),
	.sampler_tx(sampler)
);

controloqualidade_vlg_check_tst tb_out(
	.led_verde(led_verde),
	.led_vermelho(led_vermelho),
	.sampler_rx(sampler)
);
endmodule

