// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 15.0.0 Build 145 04/22/2015 Patches 0.01we SJ Web Edition"

// DATE "06/05/2020 07:42:49"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module tatica_futebol (
	ataque0,
	ataque1,
	meio_campo0,
	meio_campo1,
	defesa0,
	defesa1,
	saida);
input 	ataque0;
input 	ataque1;
input 	meio_campo0;
input 	meio_campo1;
input 	defesa0;
input 	defesa1;
output 	saida;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \saida~output_o ;
wire \ataque0~input_o ;
wire \ataque1~input_o ;
wire \meio_campo0~input_o ;
wire \meio_campo1~input_o ;
wire \defesa0~input_o ;
wire \defesa1~input_o ;
wire \saida~0_combout ;


cyclonev_io_obuf \saida~output (
	.i(\saida~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida~output_o ),
	.obar());
// synopsys translate_off
defparam \saida~output .bus_hold = "false";
defparam \saida~output .open_drain_output = "false";
defparam \saida~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \ataque0~input (
	.i(ataque0),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\ataque0~input_o ));
// synopsys translate_off
defparam \ataque0~input .bus_hold = "false";
defparam \ataque0~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \ataque1~input (
	.i(ataque1),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\ataque1~input_o ));
// synopsys translate_off
defparam \ataque1~input .bus_hold = "false";
defparam \ataque1~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \meio_campo0~input (
	.i(meio_campo0),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\meio_campo0~input_o ));
// synopsys translate_off
defparam \meio_campo0~input .bus_hold = "false";
defparam \meio_campo0~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \meio_campo1~input (
	.i(meio_campo1),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\meio_campo1~input_o ));
// synopsys translate_off
defparam \meio_campo1~input .bus_hold = "false";
defparam \meio_campo1~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \defesa0~input (
	.i(defesa0),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\defesa0~input_o ));
// synopsys translate_off
defparam \defesa0~input .bus_hold = "false";
defparam \defesa0~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \defesa1~input (
	.i(defesa1),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\defesa1~input_o ));
// synopsys translate_off
defparam \defesa1~input .bus_hold = "false";
defparam \defesa1~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \saida~0 (
// Equation(s):
// \saida~0_combout  = ( !\defesa0~input_o  & ( \defesa1~input_o  & ( (!\ataque0~input_o  & (\ataque1~input_o  & (!\meio_campo0~input_o  $ (!\meio_campo1~input_o )))) # (\ataque0~input_o  & (!\ataque1~input_o  & (!\meio_campo0~input_o  $ 
// (!\meio_campo1~input_o )))) ) ) ) # ( \defesa0~input_o  & ( !\defesa1~input_o  & ( (!\ataque0~input_o  & (\ataque1~input_o  & (!\meio_campo0~input_o  $ (!\meio_campo1~input_o )))) # (\ataque0~input_o  & (!\ataque1~input_o  & (!\meio_campo0~input_o  $ 
// (!\meio_campo1~input_o )))) ) ) )

	.dataa(!\ataque0~input_o ),
	.datab(!\ataque1~input_o ),
	.datac(!\meio_campo0~input_o ),
	.datad(!\meio_campo1~input_o ),
	.datae(!\defesa0~input_o ),
	.dataf(!\defesa1~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\saida~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \saida~0 .extended_lut = "off";
defparam \saida~0 .lut_mask = 64'h0000066006600000;
defparam \saida~0 .shared_arith = "off";
// synopsys translate_on

assign saida = \saida~output_o ;

endmodule
