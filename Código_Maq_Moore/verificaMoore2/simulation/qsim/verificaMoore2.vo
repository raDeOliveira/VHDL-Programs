// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 15.0.0 Build 145 04/22/2015 Patches 0.01we SJ Web Edition"

// DATE "06/06/2020 19:43:40"

// 
// Device: Altera 5CGXFC7C7F23C8 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module verificaMoore2 (
	clk,
	start,
	saida_moore,
	saida_mealy);
input 	clk;
input 	start;
output 	saida_moore;
output 	saida_mealy;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \saida_moore~output_o ;
wire \saida_mealy~output_o ;
wire \clk~input_o ;
wire \start~input_o ;
wire \stateMoore_reg~0_combout ;
wire \stateMoore_reg~q ;
wire \saida_moore$latch~combout ;


cyclonev_io_obuf \saida_moore~output (
	.i(\saida_moore$latch~combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida_moore~output_o ),
	.obar());
// synopsys translate_off
defparam \saida_moore~output .bus_hold = "false";
defparam \saida_moore~output .open_drain_output = "false";
defparam \saida_moore~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \saida_mealy~output (
	.i(gnd),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\saida_mealy~output_o ),
	.obar());
// synopsys translate_off
defparam \saida_mealy~output .bus_hold = "false";
defparam \saida_mealy~output .open_drain_output = "false";
defparam \saida_mealy~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \start~input (
	.i(start),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\start~input_o ));
// synopsys translate_off
defparam \start~input .bus_hold = "false";
defparam \start~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \stateMoore_reg~0 (
// Equation(s):
// \stateMoore_reg~0_combout  = !\stateMoore_reg~q  $ (!\start~input_o )

	.dataa(!\stateMoore_reg~q ),
	.datab(!\start~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\stateMoore_reg~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \stateMoore_reg~0 .extended_lut = "off";
defparam \stateMoore_reg~0 .lut_mask = 64'h6666666666666666;
defparam \stateMoore_reg~0 .shared_arith = "off";
// synopsys translate_on

dffeas stateMoore_reg(
	.clk(\clk~input_o ),
	.d(\stateMoore_reg~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\stateMoore_reg~q ),
	.prn(vcc));
// synopsys translate_off
defparam stateMoore_reg.is_wysiwyg = "true";
defparam stateMoore_reg.power_up = "low";
// synopsys translate_on

cyclonev_lcell_comb saida_moore$latch(
// Equation(s):
// \saida_moore$latch~combout  = ( \saida_moore$latch~combout  & ( \start~input_o  & ( !\stateMoore_reg~q  ) ) ) # ( !\saida_moore$latch~combout  & ( \start~input_o  & ( !\stateMoore_reg~q  ) ) ) # ( \saida_moore$latch~combout  & ( !\start~input_o  ) )

	.dataa(gnd),
	.datab(gnd),
	.datac(gnd),
	.datad(!\stateMoore_reg~q ),
	.datae(!\saida_moore$latch~combout ),
	.dataf(!\start~input_o ),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\saida_moore$latch~combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam saida_moore$latch.extended_lut = "off";
defparam saida_moore$latch.lut_mask = 64'h0000FFFFFF00FF00;
defparam saida_moore$latch.shared_arith = "off";
// synopsys translate_on

assign saida_moore = \saida_moore~output_o ;

assign saida_mealy = \saida_mealy~output_o ;

endmodule
