// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2020 00:03:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rodasorte
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rodasorte_vlg_sample_tst(
	clk_dois,
	clk_um,
	clk_zero,
	start,
	sampler_tx
);
input  clk_dois;
input  clk_um;
input  clk_zero;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk_dois or clk_um or clk_zero or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rodasorte_vlg_check_tst (
	s_OUT_dois,
	s_OUT_resultado,
	s_OUT_um,
	s_OUT_zero,
	sampler_rx
);
input [2:0] s_OUT_dois;
input  s_OUT_resultado;
input [2:0] s_OUT_um;
input [2:0] s_OUT_zero;
input sampler_rx;

reg [2:0] s_OUT_dois_expected;
reg  s_OUT_resultado_expected;
reg [2:0] s_OUT_um_expected;
reg [2:0] s_OUT_zero_expected;

reg [2:0] s_OUT_dois_prev;
reg  s_OUT_resultado_prev;
reg [2:0] s_OUT_um_prev;
reg [2:0] s_OUT_zero_prev;

reg [2:0] s_OUT_dois_expected_prev;
reg  s_OUT_resultado_expected_prev;
reg [2:0] s_OUT_um_expected_prev;
reg [2:0] s_OUT_zero_expected_prev;

reg [2:0] last_s_OUT_dois_exp;
reg  last_s_OUT_resultado_exp;
reg [2:0] last_s_OUT_um_exp;
reg [2:0] last_s_OUT_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	s_OUT_dois_prev = s_OUT_dois;
	s_OUT_resultado_prev = s_OUT_resultado;
	s_OUT_um_prev = s_OUT_um;
	s_OUT_zero_prev = s_OUT_zero;
end

// update expected /o prevs

always @(trigger)
begin
	s_OUT_dois_expected_prev = s_OUT_dois_expected;
	s_OUT_resultado_expected_prev = s_OUT_resultado_expected;
	s_OUT_um_expected_prev = s_OUT_um_expected;
	s_OUT_zero_expected_prev = s_OUT_zero_expected;
end


// expected s_OUT_dois[ 2 ]
initial
begin
	s_OUT_dois_expected[2] = 1'bX;
end 
// expected s_OUT_dois[ 1 ]
initial
begin
	s_OUT_dois_expected[1] = 1'bX;
end 
// expected s_OUT_dois[ 0 ]
initial
begin
	s_OUT_dois_expected[0] = 1'bX;
end 

// expected s_OUT_resultado
initial
begin
	s_OUT_resultado_expected = 1'bX;
end 
// expected s_OUT_um[ 2 ]
initial
begin
	s_OUT_um_expected[2] = 1'bX;
end 
// expected s_OUT_um[ 1 ]
initial
begin
	s_OUT_um_expected[1] = 1'bX;
end 
// expected s_OUT_um[ 0 ]
initial
begin
	s_OUT_um_expected[0] = 1'bX;
end 
// expected s_OUT_zero[ 2 ]
initial
begin
	s_OUT_zero_expected[2] = 1'bX;
end 
// expected s_OUT_zero[ 1 ]
initial
begin
	s_OUT_zero_expected[1] = 1'bX;
end 
// expected s_OUT_zero[ 0 ]
initial
begin
	s_OUT_zero_expected[0] = 1'bX;
end 
// generate trigger
always @(s_OUT_dois_expected or s_OUT_dois or s_OUT_resultado_expected or s_OUT_resultado or s_OUT_um_expected or s_OUT_um or s_OUT_zero_expected or s_OUT_zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected s_OUT_dois = %b | expected s_OUT_resultado = %b | expected s_OUT_um = %b | expected s_OUT_zero = %b | ",s_OUT_dois_expected_prev,s_OUT_resultado_expected_prev,s_OUT_um_expected_prev,s_OUT_zero_expected_prev);
	$display("| real s_OUT_dois = %b | real s_OUT_resultado = %b | real s_OUT_um = %b | real s_OUT_zero = %b | ",s_OUT_dois_prev,s_OUT_resultado_prev,s_OUT_um_prev,s_OUT_zero_prev);
`endif
	if (
		( s_OUT_dois_expected_prev[0] !== 1'bx ) && ( s_OUT_dois_prev[0] !== s_OUT_dois_expected_prev[0] )
		&& ((s_OUT_dois_expected_prev[0] !== last_s_OUT_dois_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_dois[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_dois_expected_prev);
		$display ("     Real value = %b", s_OUT_dois_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_OUT_dois_exp[0] = s_OUT_dois_expected_prev[0];
	end
	if (
		( s_OUT_dois_expected_prev[1] !== 1'bx ) && ( s_OUT_dois_prev[1] !== s_OUT_dois_expected_prev[1] )
		&& ((s_OUT_dois_expected_prev[1] !== last_s_OUT_dois_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_dois[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_dois_expected_prev);
		$display ("     Real value = %b", s_OUT_dois_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_OUT_dois_exp[1] = s_OUT_dois_expected_prev[1];
	end
	if (
		( s_OUT_dois_expected_prev[2] !== 1'bx ) && ( s_OUT_dois_prev[2] !== s_OUT_dois_expected_prev[2] )
		&& ((s_OUT_dois_expected_prev[2] !== last_s_OUT_dois_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_dois[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_dois_expected_prev);
		$display ("     Real value = %b", s_OUT_dois_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s_OUT_dois_exp[2] = s_OUT_dois_expected_prev[2];
	end
	if (
		( s_OUT_resultado_expected_prev !== 1'bx ) && ( s_OUT_resultado_prev !== s_OUT_resultado_expected_prev )
		&& ((s_OUT_resultado_expected_prev !== last_s_OUT_resultado_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_resultado :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_resultado_expected_prev);
		$display ("     Real value = %b", s_OUT_resultado_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_OUT_resultado_exp = s_OUT_resultado_expected_prev;
	end
	if (
		( s_OUT_um_expected_prev[0] !== 1'bx ) && ( s_OUT_um_prev[0] !== s_OUT_um_expected_prev[0] )
		&& ((s_OUT_um_expected_prev[0] !== last_s_OUT_um_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_um[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_um_expected_prev);
		$display ("     Real value = %b", s_OUT_um_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_OUT_um_exp[0] = s_OUT_um_expected_prev[0];
	end
	if (
		( s_OUT_um_expected_prev[1] !== 1'bx ) && ( s_OUT_um_prev[1] !== s_OUT_um_expected_prev[1] )
		&& ((s_OUT_um_expected_prev[1] !== last_s_OUT_um_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_um[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_um_expected_prev);
		$display ("     Real value = %b", s_OUT_um_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_OUT_um_exp[1] = s_OUT_um_expected_prev[1];
	end
	if (
		( s_OUT_um_expected_prev[2] !== 1'bx ) && ( s_OUT_um_prev[2] !== s_OUT_um_expected_prev[2] )
		&& ((s_OUT_um_expected_prev[2] !== last_s_OUT_um_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_um[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_um_expected_prev);
		$display ("     Real value = %b", s_OUT_um_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s_OUT_um_exp[2] = s_OUT_um_expected_prev[2];
	end
	if (
		( s_OUT_zero_expected_prev[0] !== 1'bx ) && ( s_OUT_zero_prev[0] !== s_OUT_zero_expected_prev[0] )
		&& ((s_OUT_zero_expected_prev[0] !== last_s_OUT_zero_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_zero[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_zero_expected_prev);
		$display ("     Real value = %b", s_OUT_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_OUT_zero_exp[0] = s_OUT_zero_expected_prev[0];
	end
	if (
		( s_OUT_zero_expected_prev[1] !== 1'bx ) && ( s_OUT_zero_prev[1] !== s_OUT_zero_expected_prev[1] )
		&& ((s_OUT_zero_expected_prev[1] !== last_s_OUT_zero_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_zero[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_zero_expected_prev);
		$display ("     Real value = %b", s_OUT_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_OUT_zero_exp[1] = s_OUT_zero_expected_prev[1];
	end
	if (
		( s_OUT_zero_expected_prev[2] !== 1'bx ) && ( s_OUT_zero_prev[2] !== s_OUT_zero_expected_prev[2] )
		&& ((s_OUT_zero_expected_prev[2] !== last_s_OUT_zero_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_OUT_zero[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_OUT_zero_expected_prev);
		$display ("     Real value = %b", s_OUT_zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_s_OUT_zero_exp[2] = s_OUT_zero_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rodasorte_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_dois;
reg clk_um;
reg clk_zero;
reg start;
// wires                                               
wire [2:0] s_OUT_dois;
wire s_OUT_resultado;
wire [2:0] s_OUT_um;
wire [2:0] s_OUT_zero;

wire sampler;                             

// assign statements (if any)                          
rodasorte i1 (
// port map - connection between master ports and signals/registers   
	.clk_dois(clk_dois),
	.clk_um(clk_um),
	.clk_zero(clk_zero),
	.s_OUT_dois(s_OUT_dois),
	.s_OUT_resultado(s_OUT_resultado),
	.s_OUT_um(s_OUT_um),
	.s_OUT_zero(s_OUT_zero),
	.start(start)
);

// clk_dois
initial
begin
	clk_dois = 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #15000 1'b0;
	clk_dois = #20000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #35000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #15000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #15000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #40000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #15000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #25000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #15000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #15000 1'b1;
	clk_dois = #15000 1'b0;
	clk_dois = #30000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #20000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #20000 1'b1;
	clk_dois = #15000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #15000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #20000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #35000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #15000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #15000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #5000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #45000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #15000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #10000 1'b0;
	clk_dois = #10000 1'b1;
	clk_dois = #5000 1'b0;
	clk_dois = #10000 1'b1;
end 

// clk_um
initial
begin
	clk_um = 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #30000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #15000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #20000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #15000 1'b0;
	clk_um = #15000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #20000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #15000 1'b1;
	clk_um = #15000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #15000 1'b1;
	clk_um = #30000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #15000 1'b1;
	clk_um = #15000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #25000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #15000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #20000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #15000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #30000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #30000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #10000 1'b1;
	clk_um = #20000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #15000 1'b0;
	clk_um = #15000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #5000 1'b1;
	clk_um = #10000 1'b0;
	clk_um = #30000 1'b1;
	clk_um = #5000 1'b0;
	clk_um = #15000 1'b1;
	clk_um = #15000 1'b0;
end 

// clk_zero
initial
begin
	clk_zero = 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #20000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #20000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #15000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #30000 1'b1;
	clk_zero = #20000 1'b0;
	clk_zero = #15000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #20000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #15000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #50000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #20000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #55000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #15000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #30000 1'b0;
	clk_zero = #15000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #30000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #45000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #10000 1'b1;
	clk_zero = #5000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #20000 1'b1;
	clk_zero = #10000 1'b0;
	clk_zero = #5000 1'b1;
	clk_zero = #15000 1'b0;
	clk_zero = #10000 1'b1;
end 

// start
initial
begin
	start = 1'b1;
end 

rodasorte_vlg_sample_tst tb_sample (
	.clk_dois(clk_dois),
	.clk_um(clk_um),
	.clk_zero(clk_zero),
	.start(start),
	.sampler_tx(sampler)
);

rodasorte_vlg_check_tst tb_out(
	.s_OUT_dois(s_OUT_dois),
	.s_OUT_resultado(s_OUT_resultado),
	.s_OUT_um(s_OUT_um),
	.s_OUT_zero(s_OUT_zero),
	.sampler_rx(sampler)
);
endmodule

