// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/16/2020 20:09:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    recuperacao
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module recuperacao_vlg_sample_tst(
	clk,
	start,
	sampler_tx
);
input  clk;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module recuperacao_vlg_check_tst (
	s1,
	s2,
	s3,
	sampler_rx
);
input [2:0] s1;
input [2:0] s2;
input [2:0] s3;
input sampler_rx;

reg [2:0] s1_expected;
reg [2:0] s2_expected;
reg [2:0] s3_expected;

reg [2:0] s1_prev;
reg [2:0] s2_prev;
reg [2:0] s3_prev;

reg [2:0] s1_expected_prev;
reg [2:0] s2_expected_prev;
reg [2:0] s3_expected_prev;

reg [2:0] last_s1_exp;
reg [2:0] last_s2_exp;
reg [2:0] last_s3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	s1_prev = s1;
	s2_prev = s2;
	s3_prev = s3;
end

// update expected /o prevs

always @(trigger)
begin
	s1_expected_prev = s1_expected;
	s2_expected_prev = s2_expected;
	s3_expected_prev = s3_expected;
end


// expected s1[ 2 ]
initial
begin
	s1_expected[2] = 1'bX;
end 
// expected s1[ 1 ]
initial
begin
	s1_expected[1] = 1'bX;
end 
// expected s1[ 0 ]
initial
begin
	s1_expected[0] = 1'bX;
end 
// expected s2[ 2 ]
initial
begin
	s2_expected[2] = 1'bX;
end 
// expected s2[ 1 ]
initial
begin
	s2_expected[1] = 1'bX;
end 
// expected s2[ 0 ]
initial
begin
	s2_expected[0] = 1'bX;
end 
// expected s3[ 2 ]
initial
begin
	s3_expected[2] = 1'bX;
end 
// expected s3[ 1 ]
initial
begin
	s3_expected[1] = 1'bX;
end 
// expected s3[ 0 ]
initial
begin
	s3_expected[0] = 1'bX;
end 
// generate trigger
always @(s1_expected or s1 or s2_expected or s2 or s3_expected or s3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected s1 = %b | expected s2 = %b | expected s3 = %b | ",s1_expected_prev,s2_expected_prev,s3_expected_prev);
	$display("| real s1 = %b | real s2 = %b | real s3 = %b | ",s1_prev,s2_prev,s3_prev);
`endif
	if (
		( s1_expected_prev[0] !== 1'bx ) && ( s1_prev[0] !== s1_expected_prev[0] )
		&& ((s1_expected_prev[0] !== last_s1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s1_exp[0] = s1_expected_prev[0];
	end
	if (
		( s1_expected_prev[1] !== 1'bx ) && ( s1_prev[1] !== s1_expected_prev[1] )
		&& ((s1_expected_prev[1] !== last_s1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s1_exp[1] = s1_expected_prev[1];
	end
	if (
		( s1_expected_prev[2] !== 1'bx ) && ( s1_prev[2] !== s1_expected_prev[2] )
		&& ((s1_expected_prev[2] !== last_s1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s1_expected_prev);
		$display ("     Real value = %b", s1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_s1_exp[2] = s1_expected_prev[2];
	end
	if (
		( s2_expected_prev[0] !== 1'bx ) && ( s2_prev[0] !== s2_expected_prev[0] )
		&& ((s2_expected_prev[0] !== last_s2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s2_exp[0] = s2_expected_prev[0];
	end
	if (
		( s2_expected_prev[1] !== 1'bx ) && ( s2_prev[1] !== s2_expected_prev[1] )
		&& ((s2_expected_prev[1] !== last_s2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s2_exp[1] = s2_expected_prev[1];
	end
	if (
		( s2_expected_prev[2] !== 1'bx ) && ( s2_prev[2] !== s2_expected_prev[2] )
		&& ((s2_expected_prev[2] !== last_s2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s2_expected_prev);
		$display ("     Real value = %b", s2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s2_exp[2] = s2_expected_prev[2];
	end
	if (
		( s3_expected_prev[0] !== 1'bx ) && ( s3_prev[0] !== s3_expected_prev[0] )
		&& ((s3_expected_prev[0] !== last_s3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s3_expected_prev);
		$display ("     Real value = %b", s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s3_exp[0] = s3_expected_prev[0];
	end
	if (
		( s3_expected_prev[1] !== 1'bx ) && ( s3_prev[1] !== s3_expected_prev[1] )
		&& ((s3_expected_prev[1] !== last_s3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s3_expected_prev);
		$display ("     Real value = %b", s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s3_exp[1] = s3_expected_prev[1];
	end
	if (
		( s3_expected_prev[2] !== 1'bx ) && ( s3_prev[2] !== s3_expected_prev[2] )
		&& ((s3_expected_prev[2] !== last_s3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s3_expected_prev);
		$display ("     Real value = %b", s3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_s3_exp[2] = s3_expected_prev[2];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module recuperacao_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg start;
// wires                                               
wire [2:0] s1;
wire [2:0] s2;
wire [2:0] s3;

wire sampler;                             

// assign statements (if any)                          
recuperacao i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.start(start)
);

// clk
initial
begin
	clk = 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #15000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #20000 1'b1;
	clk = #35000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #20000 1'b1;
	clk = #10000 1'b0;
	clk = #30000 1'b1;
	clk = #25000 1'b0;
	clk = #15000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #30000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #15000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #20000 1'b0;
	clk = #15000 1'b1;
	clk = #15000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #20000 1'b0;
	clk = #25000 1'b1;
	clk = #10000 1'b0;
	clk = #15000 1'b1;
	clk = #20000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #20000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #25000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #10000 1'b1;
	clk = #15000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #5000 1'b0;
	clk = #15000 1'b1;
	clk = #15000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #25000 1'b0;
	clk = #10000 1'b1;
	clk = #20000 1'b0;
	clk = #10000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #10000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #5000 1'b1;
	clk = #5000 1'b0;
	clk = #10000 1'b1;
	clk = #20000 1'b0;
	clk = #10000 1'b1;
end 

// start
initial
begin
	start = 1'b0;
end 

recuperacao_vlg_sample_tst tb_sample (
	.clk(clk),
	.start(start),
	.sampler_tx(sampler)
);

recuperacao_vlg_check_tst tb_out(
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.sampler_rx(sampler)
);
endmodule

